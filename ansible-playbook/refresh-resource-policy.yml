#
#  Clone policy repo and perform a terraform apply.
#    To add policy, use the add-resource-policy playbook, then run this one.
#    To modify or delete a policy, make the change directly in the tfvars file and then run this playbook.
#

---
- name: Create new resource policy in Azure
  hosts: localhost

  vars_prompt:
    - name: policy_ev
      prompt: Choose an environment between dev, prod or common
      private: false

  pre_tasks:
    - name: "Check if user selected a valid environment"
      ansible.builtin.assert:
        that: (env_list is contains(policy_ev) or policy_ev == 'common')

  vars:
    env_list:
      - dev
      - prod
    env_to_refresh: "{% if policy_ev == 'common' %}{{ env_list }}{% else %}['{{ policy_ev }}']{% endif %}"

  tasks:
    - name: Fetch git repository
      ansible.builtin.git:
        repo: "https://github.com/Red-Hat-Demo-Use-Cases/demo-aap-terraform-integration.git"
        dest: "/tmp/aaa"
        clone: true
        force: true

    - name: Apply plan for environment {{ policy_ev }}
      cloud.terraform.terraform:
        project_path: "/tmp/aaa/terraform-plan"
        force_init: true
        variables_files: "{{ policy_ev }}.policies.tfvars"
        state: present  # applying a plan doesn't have a switch for this
        workspace: "{{ item }}"
      loop: "{{ env_to_refresh }}"

    # - name: Write debug message
    #   ansible.builtin.debug:
    #     msg: "Generate {{ item }}"
    #   loop: "{{ env_to_refresh }}"


#  {
#     "if": {
#       "not": {
#         "field": "location",
#         "equals": "westeurope"
#       }
#     },
#     "then": {
#       "effect": "Deny"
#     }
#   }

#  {"if": {"not": {"field": "location","equals": "westeurope"}},"then": {"effect": "Deny"}}